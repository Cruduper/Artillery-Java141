Eric Crudup	CS141

Requirements:

Create a program that plays the game Artillery. The game is played by a user and a cpu controlled player. A random distance between the cpu player's base and the user's base is chosen. The user starts and chooses an angle to fire at and a starting velocity for his missile. If the point where the missile lands is within 5 meters of the cpu's base, the player wins. If not, the cpu gets a chance to hit the user's base by randomly selecting an angle between 0-90, and a starting velocity between 30 and 130. Player and cpu turns repeat until a someone wins. Afterward, the program will ask the user if they want to play again. When the user decides not to play another game, the program will print out their win percentage, and give them an assessment based off of how many games they won.

TOP-LEVEL-DESCRIPTION

MAIN

1) Plays a game of Artillery						(F)
2) Asks if the user wants to play again					(F)
3) While the user wants to play again, repeat steps 1-3			(L)
4) If the user doesn't go again, print out win % 
5) Prints out assessment of player based of win %			(F)

-Step 1 of Main-
NAME: game_code
DESCR: calculates distance between bases. asks user for input, checks for win criteria. Calculates cpu input, checks for loss criteria.
PARAMS: double X, Scanner scan, Boolean win
RETURN: boolean
1) creates a random distance between the two bases			(F)
2) user plays a turn							(F)
3) checks to see if the user won
4) cpu players takes a turn						(F)
5) checks to see if cpu won
6) while there is no winner, steps 2-6 repeat				(L)

-Step 1 of game_code-
NAME: distance
DESCR: calculates a random distance between 100 and 200 that corresponds to the distance between the 2 bases.
PARAMS: int X, Random gen
RETURN: int
1) calculates distance: 100 + gen.nextDouble() * 100
2) returns distance

-Step 2 of game_code-
NAME: player_turn
DESCR: the human player enters in an angle and a velocity. The program then calculates the distance the players shot fires, and returns that distance
PARAMS: double plyr_deg_choice, double plyr_speed_choice, plyr_missile_dist, Scanner scan
RETURN: double
1) ask the user to enter an angle
2) ask the user to enter a velocity
3) calculate the distance the player's missile travels			(F)
4) print the distance the players missile travels
5) return the distance the players missile travels

-Step 3 of player_turn-
NAME: hit_calc
DESCR: takes the degree and angle the player input, and calculates distance fired
PARAMS: double deg, double speed, double rad
RETURN: double
1) converts the degrees the player entered to radians
2) calculates distance: speed * speed * Math.sin( 2 * rad ) / 9.8
3) returns distance

-Step 4 of game_code-
NAME: cpu_turn
DESCR: random numbers are chosen for the cpu's angle and velocity. The program then calculate the distance the cpu's shot fires, and returns that distance
PARAMS: cpu_deg_choice, cpu_speed_choice, cpu_missile_dist, Random gen
RETURN: double
1) calculate random angle
2) calculate random velocity
3) calculate the distance the cpu's missile travels			(F)
4) print the distance the players missile travels
5) return the distance the cpu's missile travels

-Step 3 of cpu_turn-
*see step 3 of player_turn*

-Step 2 of main-
NAME: playagain
DESCR: asks user if they want to play another game before exiting the program
PARAMS: Scanner scan, boolean again
Return: boolean
1) a prompt appears asking if the user would like to play again
2) if yes, again returns true
3) if no, again returns false

-Step 5 of Main-
NAME: win_congratulator
DESCR:  chastises or congratulates player based off of win percentage
PARAMS: Scanner scan, int games_played, int games_won
RETURN: void
1) if win % is over 90, say something very nice
2) if win % is > 75 && < 90, say something kind of nice
3) if win % is < 75, say something very mean